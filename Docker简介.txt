#Docker 是一个代替虚拟机的软件。提供应用可移植性。作为个人开发，docker可以免去最恶心的配置环境问题。 

docker --version 查看版本号

基本语法 docker [OPTIONS] COMMAND [arg…]

#常用命令
docker images 查看已有的镜像

docker save -o image_name.tar image_name 导出镜像

docker port con_id 看容器的端口映射情况

docker attach con_name 进入容器
 

##配置相关
CentOS: /etc/sysconfig/docker

vim  /lib/systemd/system/docker.service

ExecStart 为启动配置


##容器相关

docker ps 查看正在运行的容器。 

docker ps -a 查看所有的容器。

docker port 可以查看指定 （ID或者名字）容器的某个确定端口映射到宿主机的端口号。

docker logs [ID或者名字] 可以查看容器内部的标准输出。

使用 docker inspect 来查看Docker的底层信息。它会返回一个 JSON 文件记录着 Docker 容器的配置和状态信息。

docker stop 名字  停止

docker start 容器名字 启动  run 命令包含了create和start俩个命令

docker rm 容器名字 移除不需要的容器 ,需先停止

rm －v -v为删除Volumes,最好每次都带上

docker attach name 进入一个运行中的容器

如果要正常退出不关闭容器，请按Ctrl+P+Q进行退出容器

exit 退出容器会关闭当前容器

docker Dockerfile中CMD会直接关闭docker，使用-d来让容器后台运行。但是-d并不意味着脚本永远执行，而是可以后台运行，也就是说我们需要开一个前台的程序让脚本挂起。如果脚本执行结束，那么容器也就关闭了。可以直接使用-it连用，会在容器中打开一个输入终端。这样就实现了挂起前台的任务。

##镜像

docker images 来列出本地主机上的镜像。

docker pull ubuntu:13.10 下载ubuntu13.10，可以直接使用ubuntu

docker search 查找

docker 容器和镜像的区别

docker rmi 删除镜像，需先rm容器

https://www.cnblogs.com/bethal/p/5942369.html //容器和镜像的区别.简单讲容器会包含镜像，并且有一层可读可写层，但是镜像是只读的，只可以利用镜像的环境，来run容器的代码。


commit 创建一个新的镜像


## 运行命令解释

docker run -it --name=app -p 8080:8000 -v /code:/usr/src/app  
-w /usr/src/myapp --link=redis:db django bash 
-it 创建完成后进入这个容器
 -v /code:/usr/src/app 表示把宿主机上的/code目录挂载到容器内的/usr/src/app目录，可以通过直接管理宿主机上的挂载目录来管理容器内部的挂载目录。:为分割之前为宿主机路径 
-w /usr/src/myapp :指定容器的/usr/src/myapp目录为工作目录
--link=redis:db 表示把redis容器以db别名与该容器建立关系，在该容器内以db作为主机名表示了redis容器的主机地址。


docker run -d -p ip 127.0.0.1:80:80 -i [name] 80:80 --name webserver nginx  run 运行， -d 让容器在后台运行 -P:将容器内部使用的网络端口映射到我们使用的主机上  
ip 为印射的端口，此处为把宿主机的80端口印射到容器80端口21
--name后容器名字，可以省略 -i打开容器标准输入 


docker run  -v $PWD/myapp:/usr/src/myapp  -w /usr/src/myapp python:3.5 python helloworld.py

-v $PWD/myapp:/usr/src/myapp :将主机中当前目录下的myapp挂载到容器的/usr/src/myapp

-w /usr/src/myapp :指定容器的/usr/src/myapp目录为工作目录，不存在会创建

python helloworld.py :使用容器的python命令来执行工作目录中的helloworld.py文件

